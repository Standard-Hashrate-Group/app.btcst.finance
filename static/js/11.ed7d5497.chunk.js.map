{"version":3,"sources":["src/components/Heading.tsx","src/components/Border.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","node_modules/@babel/runtime/helpers/objectDestructuringEmpty.js","src/hooks/useBridgeRecordState.tsx","src/screens/SHTOurBridgeRecordScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Border","border","width","backgroundColor","marginTop","Column","View","noTopMargin","Platform","OS","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onMedium","onTg","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","flags","us","require","uk","cn","kr","Flag","locale","history","useHistory","location","useLocation","TouchableHighlight","push","pathname","marginHorizontal","Image","source","WebFooter","onPressAlchemy","padding","Text","note","Constants","manifest","version","module","exports","obj","TypeError","STATUS","STATUS_MAP","0","1","2","3","4","useRecordState","EthersContext","provider","signer","address","bridgeActions","getUserRecordLen","getUserRecord","getUserRecordIndex","getRecordsOthersideInfo","getRecordsMeta","getRecordsLocalInfo","useState","totalLockedBTCST","settotalLockedBTCST","loadingTotalLocked","setloadingTotalLocked","bridgedToTron","setbridgedToTron","loadingbridgedToTron","setloadingbridgedToTron","records","setRecords","loadingRecords","setLoadingRecords","useEffect","useAsyncEffect","a","async","getContract","BTCST","getCirculatingBTCSTSupply","total","isProviderOnTron","getTotalRemainingSupplyLocked","locked","sub","getBridgeTokenPair","pair","left","getAddress","account","ppp","getAccount","hex","len","result","ii","BigNumber","from","record","cts","uts","otherSideAddress","status","amount","fee","recordType","meta","otherSide","Mining","state","BtcStillInPool","t","useTranslation","loading","Title","formatBalance","YourStakingRecord","recordItem","RecordItem","RecordList","renderItem","useCallback","item","key","data","useMemo","sort","t1","t2","toNumber","Loading","length","paddingVertical","caption","numberOfLines","marginLeft","FlatList","keyExtractor","toString","ItemSeparatorComponent","EmptyList","margin","textAlign","formatTimeKey","formatTronAddress","SHTMiningScreen","totalValue","Screen","Container","BackgroundImage","Content","huge"],"mappings":"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","file":"static/js/11.ed7d5497.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"http://twitter.com/BTCST2020\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/Standard-Hashrate-Group\", \"\", \"_blank\");\n    \n    const onMedium = useLinker(\"https://btcst.medium.com/\", \"\", \"_blank\");\n    // const onPressReddit = useLinker(\"https://www.reddit.com/user/BTCStandardHashrate\", \"\", \"_blank\");\n    const onTg = useLinker(\"https://t.me/BTCSTCommunity\",\"\",\"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.com/channels/791170396316893255/791170396765945886\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <SocialIcon type=\"medium\" onPress={onMedium} />\n            <SocialIcon type=\"telegram\" onPress={onTg} />\n            {/* <SocialIcon type=\"twitch\" onPress={onPressReddit} /> */}\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport FlexView from \"../FlexView\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst flags = {\n    us: require(\"../../../assets/flags/us.png\"),\n    uk: require(\"../../../assets/flags/uk.png\"),\n    cn: require(\"../../../assets/flags/cn.png\"),\n    kr: require(\"../../../assets/flags/kr.png\")\n};\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://certik.foundation/\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View style={{ width: \"100%\", padding: Spacing.normal, alignItems: \"center\" }}>\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/certik-logo-w.png\")}\n                        style={{ width: 168, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <SocialIcons />\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by Standard Hashrate (v{Constants.manifest.version})\n                </Text>\n                <FlexView style={{ marginTop: Spacing.small }}>\n                    <Flag name={\"uk\"} locale={\"en\"} />\n                    <Flag name={\"cn\"} locale={\"zh\"} />\n                    {/* <Flag name={\"kr\"} locale={\"ko\"} /> */}\n                </FlexView>\n            </View>\n        </Column>\n    );\n};\n\nconst Flag = ({ name, locale }) => {\n    const history = useHistory();\n    const location = useLocation();\n    const onPress = () => {\n        history.push(location.pathname + \"?locale=\" + locale);\n    };\n    return (\n        <TouchableHighlight onPress={onPress} style={{ marginHorizontal: 4 }}>\n            <Image source={flags[name]} style={{ width: 30, height: 20 }} />\n        </TouchableHighlight>\n    );\n};\n\nexport default WebFooter;\n","function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}\n\nmodule.exports = _objectDestructuringEmpty;","import { useContext, useEffect, useState } from \"react\";\n\nimport { BigNumber, ethers } from \"ethers\";\nimport sushiData from \"@sushiswap/sushi-data\";\nimport useAsyncEffect from \"use-async-effect\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport { isWETH } from \"../utils\";\nimport { getCirculatingBTCSTSupply,getBridgeTokenPair, bridgeActions,totalSupplyOfSToken,getTotalRemainingSupplyLocked} from \"../utils/api-utils\";\nimport { getContract, parseBalance } from \"../utils\";\nimport { BTCST,BTCSTFarm,BBTC,BRIDGE } from \"../constants/contracts\";\nimport MiningUserInfo from \"../types/MiningUserInfo\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport {isProviderOnTron,getAsyncContract} from \"../utils/getContract\"\nimport {TronWebProvider} from \"../connectors/tron/tronWebProvider\"\nimport {TRON_ADDRESS_MAPPING} from \"../constants/contracts\"\n\n\nexport enum STATUS{INIT,ARRIVED,ROLLEDBACK,COMMITED,WAIT_SELF_CLAIM};\nexport const STATUS_MAP = {\n    0:\"initial\",\n    1:\"arrived\",\n    2:\"rolledback\",\n    3:\"commited\",\n    4:\"claimable\"\n}\nexport interface BridgeRecord{\n    cts:BigNumber;\n    uts:BigNumber;\n    otherSideAddress:string;\n    status:BigNumber;\n    amount:BigNumber;\n    fee:BigNumber;\n    recordType:BigNumber;\n}\nexport interface RecordState {\n    totalLockedBTCST:ethers.BigNumber;\n    loadingTotalLocked:boolean;\n    bridgedToTron:ethers.BigNumber;\n    loadingbridgedToTron:boolean;\n    records?:BridgeRecord[];\n    loadingRecords:boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useRecordState = () => {\n    const { provider, signer, address } = useContext(EthersContext);\n    const {getUserRecordLen,getUserRecord,getUserRecordIndex,\n        getRecordsOthersideInfo,getRecordsMeta,getRecordsLocalInfo} = bridgeActions();\n    const [totalLockedBTCST,settotalLockedBTCST] = useState<ethers.BigNumber>();\n    const [loadingTotalLocked,setloadingTotalLocked] = useState(true);\n    \n    \n    const [bridgedToTron,setbridgedToTron] = useState<ethers.BigNumber>();\n    const [loadingbridgedToTron,setloadingbridgedToTron] = useState(true);\n\n    const [records,setRecords] = useState<BridgeRecord[]>();\n    const [loadingRecords,setLoadingRecords] = useState(true);\n\n    useEffect(() => {\n        settotalLockedBTCST(undefined);\n        setloadingTotalLocked(true);\n        setbridgedToTron(undefined);\n        setloadingbridgedToTron(true);\n        setRecords(undefined);\n        setLoadingRecords(true);\n    }, [address]);\n\n    //load total mined BTC in all\n    useAsyncEffect(async()=>{\n        if (provider && signer) {\n            const contract = getContract(\"ERC20\", BTCST, signer);\n            try{\n                // const pair = await getBridgeTokenPair(provider);\n                // console.log(\"pair\",pair);\n                \n                // settotalLockedBTCST(await contract.balanceOf(BRIDGE));\n            }finally{\n                \n            }\n        }\n    },[provider,signer]);\n    //load current total staked btcst\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setloadingbridgedToTron(true);\n            setloadingTotalLocked(true);\n            try{\n                let total = await getCirculatingBTCSTSupply(provider);\n                if ( !isProviderOnTron(provider) && !isProviderOnTron(signer)){\n                    const locked = await getTotalRemainingSupplyLocked(provider);\n                    total = total.sub(locked);\n                }\n                const pair = await getBridgeTokenPair(provider);\n                const left = pair[\"leftAmount\"];\n                // settotalLockedBTCST(total.sub(left));\n                if (isProviderOnTron(provider)){\n                    setbridgedToTron(total);\n                    settotalLockedBTCST(undefined);\n                }else{\n                    settotalLockedBTCST(total);\n                    setbridgedToTron(left); \n                }\n                \n            }finally{\n                setloadingbridgedToTron(false);\n                setloadingTotalLocked(false);\n            }\n        }\n    },[provider,signer]);\n    useAsyncEffect(async()=>{\n        if (provider && signer ){\n            setLoadingRecords(true);\n            try{\n                let account;\n                if ( !isProviderOnTron(provider) && !isProviderOnTron(signer)){\n                    account = await signer.getAddress();\n                }else{\n                    const ppp = signer.provider.provider as TronWebProvider;\n                    account = ppp.getAccount().hex;\n                }\n                const len = await getUserRecordLen(account,provider);\n                const MAX_LOAD = 10;\n                let load = len;\n                if (len>MAX_LOAD){\n                    load = MAX_LOAD;\n                }\n                if (len>0){\n                    let result:BridgeRecord[] = [];\n                    for (let ii=len-1;ii>=0;ii--){\n                        if ( !isProviderOnTron(provider) && !isProviderOnTron(signer)){\n                            let record = await getUserRecord(BigNumber.from(ii),account,provider);\n                            result.push({\n                                cts:record['cts'],\n                                uts:record['uts'],\n                                otherSideAddress:record['otherSideInfo']['otherSideAddress'],\n                                status:record['status'],\n                                amount:record['amount'],\n                                fee:record['fee'],\n                                recordType:record['recordType']\n                            } as BridgeRecord);\n                        }else{\n                            const record = await getUserRecord(BigNumber.from(ii),account,provider);\n                            const recordIndex = await getUserRecordIndex(BigNumber.from(ii),account,provider);\n                            const meta = await getRecordsMeta(BigNumber.from(ii),provider);\n                            const otherSide = await getRecordsOthersideInfo(BigNumber.from(ii),provider);\n                            result.push({\n                                cts:meta[4],\n                                uts:meta[5],\n                                otherSideAddress:otherSide[0],\n                                status:meta[1],\n                                amount:meta[0],\n                                fee:meta[3],\n                                recordType:record[0]\n                            } as BridgeRecord);\n                        }\n                    }\n                    setRecords(result);\n                }\n\n            }finally{\n                setLoadingRecords(false);\n            }\n        }\n    },[provider,signer]);\n    \n    return {\n        totalLockedBTCST,\n        loadingTotalLocked,\n        bridgedToTron,\n        loadingbridgedToTron,\n        records,\n        loadingRecords\n    };\n};\n\nexport default useRecordState;\n","import React, { FC, useCallback, useContext, useMemo } from \"react\";\nimport { FlatList, Platform, TouchableHighlight, View } from \"react-native\";\nimport { Icon } from \"react-native-elements\";\n\nimport { BigNumber, ethers } from \"ethers\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport FlexView from \"../components/FlexView\";\nimport Heading from \"../components/Heading\";\nimport Loading from \"../components/Loading\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\n\nimport WebFooter from \"../components/web/WebFooter\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\n\nimport useRecordState, { RecordState,BridgeRecord,STATUS,STATUS_MAP } from \"../hooks/useBridgeRecordState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport LPTokenWithValue from \"../types/LPTokenWithValue\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatUSD,formatBalance, formatTimeKey,formatTronAddress } from \"../utils\";\nimport Screen from \"./Screen\";\nimport MiningStakeRecord from \"../types/MiningStakeRecord\";\nimport { BridgeSubMenu } from \"../components/web/WebSubMenu\";\n\ninterface BridgeRecordItemProps {\n    record: BridgeRecord;\n    disabled?: boolean;\n}\nconst SHTMiningScreen = () => {\n    const t = useTranslation();\n    const state = useRecordState();\n    const { } = useContext(EthersContext);\n    const loading = state.loadingTotalLocked;\n    const totalValue = state.totalLockedBTCST;\n    \n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content style={{ paddingBottom: Spacing.huge }}>\n                    <Title text={t(\"ourBridge.stay-on-BSC\")} style={{ flex: 1,fontSize:28 }} />\n                    <Title\n                        text={loading ? t(\"fetching\") : totalValue==undefined? \"N/A\":formatBalance(totalValue,17,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n                    <Mining state={state} />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <BridgeSubMenu />\n        </Screen>\n    );\n};\n\nconst Mining = ({ state }: { state: RecordState }) => {\n    return (\n        <View style={{ marginTop: IS_DESKTOP ? Spacing.large : Spacing.normal }}>\n            <BtcStillInPool state={state} />\n            <Border/>\n            <View style={{ height: Spacing.tiny }} />\n            <YourStakingRecord state={state} />\n        </View>\n    );\n};\n\nconst BtcStillInPool = ({ state }: { state: RecordState }) => {\n    const t = useTranslation();\n    const {} = useContext(EthersContext);\n    const amount = state.bridgedToTron;\n    const loading = state.loadingbridgedToTron;\n    return (\n        <View>\n            <Heading text={t(\"ourBridge.already-bridged-to-tron\")} \n                style={{ flex: 1,fontSize:28 }}/>\n            <Title\n                        text={loading || amount==undefined ? t(\"fetching\") : formatBalance(amount,17,8)}\n                        fontWeight={\"light\"}\n                        disabled={loading}\n                        style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n                    />\n        </View>\n    );\n};\nconst YourStakingRecord = ({ state }: { state: RecordState }) => {\n    const t = useTranslation();\n    \n    return (\n        <View>\n            <Heading text={t(\"ourBridge.your-bridge-records\")} />\n            {/* @ts-ignore */}\n            <RecordList loading={state.loadingRecords} records={state.records} recordItem={RecordItem}/>\n        </View>\n    );\n};\n\n\n\nconst LoadingNumber = (props:{\n    loading:boolean;\n    number:ethers.BigNumber;\n    suffix:string;\n})=>{\n    // const text = formatBalance(props.number)+\"\"+props.suffix;\n    const suffix = props.suffix?props.suffix:\"\";\n    return (props.loading || props.number==undefined) ?(\n        <Loading />\n    ):(\n        <Title text={formatBalance(props.number)+\"\"+suffix} fontWeight={\"light\"} disabled={props.loading}\n            style={{ fontSize: IS_DESKTOP ? 32 : 24 }}\n        />\n    );\n}\nconst RecordList = (props: {\n    loading: boolean;\n    records?: BridgeRecord[];\n    recordItem: FC<BridgeRecordItemProps>;\n}) => {\n    const t = useTranslation();\n    const renderItem = useCallback(({ item }) => {\n        return <props.recordItem key={item.cts} record={item} />;\n    }, []);\n    const data = useMemo(\n        () =>(props.records || [])\n                // @ts-ignore\n                .sort((t1, t2) => (t2.cts.toNumber() || 0) - (t1.cts.toNumber() || 0)),\n        [props.records]\n    );\n    return props.loading ? (\n        <Loading />\n    ) : data.length === 0 ? (\n        <EmptyList />\n    ) : (\n        <View>\n            <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n                <View style={{flex: 1,alignItems:\"flex-start\"}}>\n                    <Text caption={true} numberOfLines={1} fontWeight={\"light\"}>\n                        {t(\"date\")}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"ourBridge.to\")}\n                    </Text>\n                </View>\n                <View>\n                    <Text caption={true} numberOfLines={1}  style={{ marginLeft: Spacing.small}}>\n                        {t(\"ourBridge.amount/fee\")}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    <Text caption={true} fontWeight={\"light\"} >\n                        {t(\"status\")}\n                    </Text>\n                </View>\n            </FlexView>\n            <FlatList\n                keyExtractor={item => item.cts.toString()}\n                data={data}\n                renderItem={renderItem}\n                ItemSeparatorComponent={() => <Border small={true} />}\n            />\n        </View>\n    );\n};\nconst EmptyList = () => {\n    const t = useTranslation();\n    return (\n        <View style={{ margin: Spacing.normal }}>\n            <Text disabled={true} style={{ textAlign: \"center\", width: \"100%\" }}>\n                {t(\"ourBridge.empty-bride-records\")}\n            </Text>\n        </View>\n    );\n};\nconst RecordItem = (props: BridgeRecordItemProps) => {\n    const t = useTranslation();\n    const record = props.record;\n    return (\n        <FlexView style={{ alignItems: \"center\", paddingHorizontal: Spacing.tiny, paddingVertical: 4 }}>\n            <View style={{flex: 1,alignItems:\"flex-start\"}}>\n                <Text caption={true} numberOfLines={1} fontWeight={\"light\"}\n                    disabled={props.disabled}>\n                    {formatTimeKey(record.cts)}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={props.disabled}>\n                    {formatTronAddress(record.otherSideAddress)}\n                </Text>\n            </View>\n            <View>\n                <Text caption={true} numberOfLines={1}  \n                    style={{ marginLeft: Spacing.small}}\n                    disabled={props.disabled}>\n                    {formatBalance(record.amount,17)+\"/\"+formatBalance(record.fee,17)}\n                </Text>\n            </View>\n            <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                <Text caption={true} fontWeight={\"light\"} disabled={props.disabled}>\n                    {t(\"ourBridge.\"+STATUS_MAP[record.status.toNumber()])}\n                </Text>\n            </View>\n            {/* <ExternalIcon path={\"/slot/\" + record.cts} /> */}\n        </FlexView>\n    );\n};\nconst ExternalIcon = ({ path }) => {\n    const { textDark, disabled } = useColors();\n    const onPress = () => window.open(\"https://app.btcst.finance/#/history\" + path.toLowerCase());\n    const isETH = path.endsWith(ethers.constants.AddressZero);\n    return (\n        <TouchableHighlight onPress={onPress} disabled={isETH}>\n            <Icon\n                type={\"evilicon\"}\n                name={\"external-link\"}\n                color={isETH ? disabled : textDark}\n                style={{ marginLeft: Spacing.tiny }}\n            />\n        </TouchableHighlight>\n    );\n};\nexport default SHTMiningScreen;\n"],"sourceRoot":""}