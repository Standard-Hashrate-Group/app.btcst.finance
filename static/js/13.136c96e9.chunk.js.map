{"version":3,"sources":["utils/format.ts","service/index.ts","utils/index.ts","utils/price.ts","utils/contract.ts","hooks/useActiveWeb3React.ts","utils/analytics.ts","components/Footer.tsx","components/Page.tsx","hooks/useFetchTokenPrice.ts","components/Header.tsx","components/LoadingButton.tsx","hooks/useDailyPool.ts","views/stake/StakeContent/index.tsx","views/stake/UnstakeContent/index.tsx","hooks/useStakeState.ts","hooks/useQuery.ts","views/stake/index.tsx"],"names":["formatBalance","value","decimals","maxFraction","formatted","utils","formatUnits","split","length","substr","parseBalance","parseUnits","formatApy","price","apr","Number","mulUnsafe","FixedNumber","from","divUnsafe","toString","apy","Math","min","pow","formatPercentage","String","getRemainTime","now","Date","totalSeconds","floor","remainSeconds","hours","padStart","minutes","seconds","progress","formatMoney","num","replace","RAMOUNT_DIVIDER","BigNumber","getTVL","a","axios","get","response","data","getTXInfo","getTokenPrice","BTCB","max_supply","name","BTC","symbol","total_supply","TBTC","getMineStatus","totalSupply","contract","undefined","getTotalPendingReward","address","account","claimAllReward","TARGET_INITIAL_SUPPLY","getPoolInfo","index","poolInfo","alreadyMinedReward","merkleTotalAlreadyClaimed","viewFarmBasicInfo","Promise","all","map","field","callStatic","e","console","log","started","stakePeriod","desc","getDailyRecords","FarmContract","farmInfo","tokenAddress","arr","go","k","getTimeKey","push","viewRoundSlot","Object","assign","timeKey","_roundSlotsReward","rewardInfo","rAmount","rAccum","rAccumulateAmount","div","rewardLastSubmiter","rewardAmount","rewardAccumulateAmount","totalStaked","stakedLowestWaterMark","totalStakedInSlot","stakedAddresses","isEmptyValue","text","isBigNumber","isZero","time","baseTime","toNumber","Error","passed","round","end","calculateDailyReward","hashrate","dailyBtcPerHash","btcPrice","dailyEstimated","powerPrice","powerPerHashUnitDay","dailyBTCNetreward","subUnsafe","dailyEstimatedUSD","btc","usd","WEEEK_REWARD_MAP","START_TIME","getDailyRewardsByBlock","pair","getTime","getPriceBySymbol","list","item","values","find","p","toLowerCase","getContract","ABI","library","getAddress","isAddress","AddressZero","Contract","getSigner","connectUnchecked","getProviderOrSigner","getERC20Contract","IBEP20","abi","getFarmBTCSTContract","FARMBTCST","getTBTCChefContract","TBTCChef","getTBTCESTPolicyContract","TBTCESTPolicy","getMCContract","MasterCollector","useActiveWeb3React","context","useWeb3ReactCore","contextNetwork","NetworkContextName","active","track","window","gtag","props","process","REACT_APP_GA_MEASUREMENT_ID","useStyles","makeStyles","theme","footer","position","bottom","left","right","backgroundColor","palette","background","paper","boxShadow","paddingTop","paddingBottom","Footer","className","classes","useWeb3React","actionRef","useRef","setWalletModalStatus","useSetRecoilState","walletModalStatusAtom","setAccountModalStatus","accountModalStatusAtom","connectWallet","useCallback","openAccountModal","React","useState","anchorEl","setAnchorEl","Hidden","lgUp","Container","maxWidth","Box","display","alignItems","justifyContent","flexGrow","ml","Button","variant","onClick","slice","color","ref","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","MenuItem","i18n","changeLanguage","selected","language","Page","forwardRef","children","title","rest","location","useLocation","setTokenPriceList","tokenPriceListAtom","setTokenPriceLoading","tokenPriceLoadingAtom","useEffect","then","finally","useFetchTokenPrice","sendPageViewEvent","page_path","pathname","Helmet","root","padding","width","toolbar","minHeight","Header","setMobileNavOpen","mobileNavOpenAtom","showNav","clsx","pt","pb","fontSize","mdDown","pending","pendingIndicator","visibility","pendingIndicatorCenter","transform","pendingIndicatorStart","pendingIndicatorEnd","endIconPendingEnd","startIconPendingStart","labelPendingCenter","PendingIndicator","size","LoadingButton","disabled","pendingPosition","other","startIcon","capitalize","endIcon","label","useDailyPool","sourceToken","targetToken","txHappend","tokenPrice","useRecoilValue","tokenPriceLoading","loading","setLoading","sourceStakeAmount","setSourceStakeAmount","tokenRewardPerStake","setTokenRewardPerStake","usdRewardPerStake","setUsdTokenRewardPerStake","farmingInfo","useMemo","FarmingInfoMap","sourceTokenERC20Contract","useAsyncEffect","contractConfig","TBTC_CHEF","FarmingPidMap","totalDepositAmount","stakedTokenShrinkFactor","mul","tokenReward","tps","ups","balanceOf","FARM","BTCBStakeAmount","FARM_BTCST","BTCSTStakeAmount","totalAmount","add","sourceSupplyAmount","isNegative","fromString","mineBTCBStatus","dayList","eachHaveCoin","error","inputArea","marginBottom","percentMap","cal","StakeContent","state","t","useTranslation","stokenAllowed","asyncApproveClick","asyncStakeClick","sourceBalance","yourStakeAmount","poolLoading","formik","useFormik","initialValues","amount","onSubmit","handleChange","handleSubmit","touched","isSubmitting","errors","setFieldValue","estRewardTokenAmount","setEstRewardTokenAmount","estRewardUsd","setEstRewardUsd","ru","CircularProgress","Typography","result","mt","Grid","container","spacing","xs","sm","TextField","type","helperText","fullWidth","required","onChange","key","m","d","gt","execute","currency","format","UnstakeContent","asyncUnstakeClick","insufficientBalance","EXPAND_BASE","minAllowance","sub","useStakeState","query","URLSearchParams","search","setStokenAllowed","setTxHappend","TokenList","stakingPid","farmContract","EnTokenMining","DAILY","useAsync","allowance","useAsyncCallback","MaxUint256","estimateGas","approve","gasLimit","tx","wait","apiDepositToMining","BLOCK","deposit","apiWithdrawLatestSToken","withdraw","gte","farmUserInfo","stakingInfo","viewUserInfo","info","lockedAmount","dark","icon","marginRight","StakeView","setType","handleTypeChange","target","Breadcrumbs","aria-label","Link","href","aria-current","Divider","Card","CardHeader","Avatar","src","logoURI","Select","CardContent"],"mappings":"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","file":"static/js/13.136c96e9.chunk.js","sourcesContent":["import { BigNumberish, utils, FixedNumber } from 'ethers';\n\nconst baseTime = 1616760000000;\n\nexport const formatBalance = (\n  value: BigNumberish,\n  decimals = 18,\n  maxFraction = 0\n) => {\n  const formatted = utils.formatUnits(value, decimals);\n  if (maxFraction > 0) {\n    const split = formatted.split('.');\n    if (split.length > 1) {\n      return split[0] + '.' + split[1].substr(0, maxFraction);\n    }\n  }\n  return formatted;\n};\n\nexport function formatFixedBalance(\n  value: BigNumberish,\n  decimals = 18,\n  maxFraction = 0\n) {}\n\nexport function commonFormatBalance(value: BigNumberish, decimals = 18) {\n  return formatBalance(value, decimals, 8);\n}\n\nexport const parseBalance = (value: string = '0', decimals = 18) => {\n  return utils.parseUnits(value, decimals);\n};\n\n\nexport function formatApy(\n  value: FixedNumber,\n  price: FixedNumber\n) {\n  const apr = Number(\n    value\n      .mulUnsafe(FixedNumber.from(365))\n      .divUnsafe(price)\n      .toString()\n  );\n  // const apy = (1+apr/365)^365-1;\n  const apy = Math.min(9999.999999, Math.pow(1 + apr / 365, 365) - 1);\n  return formatPercentage(apy, 4);\n}\n\nexport const formatPercentage = (value: number, maxFraction = 2) => {\n  const formatted = String(value * 100);\n  if (maxFraction > 0) {\n    const split = formatted.split('.');\n    if (split.length > 1) {\n      return split[0] + '.' + split[1].substr(0, maxFraction);\n    }\n  }\n  return formatted;\n};\n\nexport function getRemainTime() {\n  const now = Date.now();\n  const secondsPerDay = 24 * 60 * 60;\n  const totalSeconds =  Math.floor(((now - baseTime) / 1000) % secondsPerDay);\n  const remainSeconds = secondsPerDay - totalSeconds; \n\n  const hours = String(Math.floor((remainSeconds / ( 60 * 60)) % 24)).padStart(2, '0');\n  const minutes = String(Math.floor((remainSeconds / 60) % 60)).padStart(2, '0');\n  const seconds = String(Math.floor(remainSeconds % 60)).padStart(2, '0');\n  const progress = Math.floor(totalSeconds * 100 / secondsPerDay);\n\n  return {\n    hours,\n    minutes,\n    seconds,\n    progress\n  }\n}\n\nexport function formatMoney(num: Number) {\n  return num.toString().replace(/(\\d)(?=(?:\\d{3})+$)/g, '$1,');\n}\n","import { BigNumber } from '@ethersproject/bignumber';\nimport axios from 'axios';\nimport { contractConfig } from 'src/config';\nimport { parseBalance } from 'src/utils/format';\nimport { AirdropInfo } from 'src/utils/airdrop';\nimport { getTimeKey } from 'src/utils';\nimport { PriceItem } from 'src/types/token';\n\nconst BATCH_LOAD_RECORD_LIMIT = 5;\nconst RAMOUNT_DIVIDER = BigNumber.from(1e8).pow(BigNumber.from(4));\nconst TBTC_RATE = 1.00;\n\ntype Response<T> = {\n  code: number;\n  data: T;\n  msg?: any;\n};\n\nexport type TokenPriceList = {\n  [key: string]: PriceItem;\n};\n\nexport async function getTVL() {\n  const response = await axios.get('https://api.1-b.tc/api/tvl/');\n\n  return response.data;\n}\n\nexport async function getTXInfo() {\n  const response = await axios.get('https://api.1-b.tc/api/getTXInfo/');\n\n  return response.data;\n}\n\nexport async function getTokenPrice() {\n  try {\n    const response = await axios.get<Response<TokenPriceList>>(\n      'https://api.1-b.tc/api/token/price'\n    );\n    const data = response.data.data;\n\n    data.BTCB = {\n      max_supply: null,\n      name: 'BTCB',\n      price: data.BTC.price,\n      symbol: 'BTCB',\n      total_supply: null\n    };\n\n    data.TBTC = {\n      max_supply: 2100,\n      name: '𝜏Bitcoin',\n      price: data.BTC.price * TBTC_RATE,\n      symbol: 'TBTC',\n      total_supply: null\n    };\n\n    return data;\n  } catch (e) {\n    return {};\n  }\n}\n\nexport async function getMineStatus() {\n  const response = await axios.get(\n    'https://584xqc7ik2.execute-api.us-east-2.amazonaws.com/beta/bp-relay'\n  );\n\n  return response.data.data;\n}\n\nexport async function getTotalStakedBTCST(contract: any, account: any) {\n  if (contract && account) {\n    return contract.viewAllTimeTotalMined();\n  }\n\n  return undefined;\n}\n\nexport async function getTotalMinedRTokenInpool(contract: any) {\n  if (contract) {\n    return contract.viewAllTimeTotalMined();\n  }\n\n  return undefined;\n}\n\nexport async function getBTCInPool(contract: any) {\n  if (contract) {\n    return contract.balanceOf(contractConfig.FARM);\n  }\n\n  return undefined;\n}\n\nexport async function totalSupply(contract: any) {\n  if (contract) {\n    return contract.totalSupply();\n  }\n  return undefined;\n}\n\nexport async function getNextRebaseDate(estPolicyContract: any) {\n  if (estPolicyContract) {\n    let nextTime = await getNextRebaseTimeInSeconds(estPolicyContract);\n    let ms = nextTime.mul(1000).toNumber();\n    if (ms < Date.now()) {\n      return undefined;\n    }\n    console.log('nextTime', ms);\n    return new Date(ms);\n  }\n  return undefined;\n}\n\nexport async function getNextRebaseTimeInSeconds(estPolicyContract: any) {\n  if (estPolicyContract) {\n    const lastRebaseTime = await estPolicyContract.lastRebaseTimestampSec();\n    const interval = await estPolicyContract.minRebaseTimeIntervalSec();\n    return lastRebaseTime.add(interval);\n  }\n}\n\nexport async function getTotalRemainingSupplyLocked(contract: any) {\n  if (contract) {\n    return contract.getTotalRemainingSupplyLocked();\n  }\n  return undefined;\n}\n\nexport async function getTimeWeightedPrice(contract: any) {\n  if (contract) {\n    const data = await contract.getSwapData();\n    if (BigNumber.from(0).eq(data)) {\n      //0 indicates that swap didn't inited, we make it default 1e18/1e18 means one\n      return BigNumber.from(10 ** 18 + '');\n    }\n    return data;\n  }\n  return undefined;\n}\n\nexport async function startBlock(contract: any) {\n  if (contract) {\n    return contract.startBlock();\n  }\n  return undefined;\n}\nexport async function getTokenAllowance(\n  contract: any,\n  account: string,\n  spender: string\n) {\n  if (contract && account) {\n    return contract.allowance(account, spender);\n  }\n  return undefined;\n}\n\nexport async function viewUserInfo(contract: any, account: string) {\n  if (contract && account) {\n    return contract.viewUserInfo(account);\n  }\n}\n\n// TODO: remove mock here\nexport async function getBalance(contract: any, account: string) {\n  if (contract && account) {\n    return contract.balanceOf(account);\n  }\n\n  return undefined;\n}\n\nexport async function getTotalPendingReward(\n  contract: any,\n  address: string,\n  account: string\n) {\n  if (contract && account && address) {\n    return contract.getTotalPendingReward(address, account);\n  }\n\n  return undefined;\n}\n\nexport async function claimAllReward(contract: any, account: string) {\n  if (contract && account) {\n    return contract.claimAllReward(account);\n  }\n\n  return undefined;\n}\n\nexport async function TARGET_INITIAL_SUPPLY(contract: any) {\n  if (contract) {\n    return contract.TARGET_INITIAL_SUPPLY();\n  }\n  return undefined;\n}\n\nexport async function getPoolInfo(contract: any,index: number){\n  if (contract ) {\n    return contract.poolInfo(index);\n  }\n  return undefined;\n}\nexport async function alreadyMinedReward(contract: any) {\n  if (contract) {\n    return contract.alreadyMinedReward();\n  }\n  return undefined;\n}\n\nexport async function merkleTotalAlreadyClaimed(contract: any) {\n  if (contract) {\n    return contract.merkleTotalAlreadyClaimed();\n  }\n  return undefined;\n}\n\nexport async function viewFarmBasicInfo(contract: any) {\n  const data = await Promise.all(\n    ['_farmStartedTime', '_miniStakePeriodInSeconds', '_farmDescription'].map(\n      field => {\n        try {\n          return contract.callStatic[field]();\n        } catch (e) {\n          console.log(e);\n          return '';\n        }\n      }\n    )\n  );\n  return {\n    started: data[0],\n    stakePeriod: data[1],\n    desc: data[2]\n  };\n}\n\nexport async function getDailyRecords(\n  FarmContract: any,\n  farmInfo: any,\n  tokenAddress: string\n) {\n  let arr: number[] = [];\n  let now = Date.now() / 1000;\n\n  if (!farmInfo) {\n    return undefined;\n  }\n\n  for (let index = 0; index < BATCH_LOAD_RECORD_LIMIT; index++) {\n    let go = now - index * farmInfo.stakePeriod;\n    if (go <= farmInfo.started) {\n      break;\n    }\n    let k = getTimeKey(go, farmInfo.started, farmInfo.stakePeriod);\n    arr.push(k);\n  }\n  let data = await Promise.all(\n    arr.map(field => {\n      try {\n        return FarmContract.viewRoundSlot(field);\n      } catch (e) {\n        return '';\n      }\n    })\n  );\n  for (let index = 0; index < arr.length; index++) {\n    data[index] = Object.assign({}, data[index], {\n      timeKey: arr[index]\n    });\n    let rewardInfo = await FarmContract._roundSlotsReward(\n      arr[index],\n      tokenAddress\n    );\n\n    let rAmount = rewardInfo.rAmount;\n    let rAccum = rewardInfo.rAccumulateAmount;\n    if (rewardInfo.rAmount) {\n      rAmount = rewardInfo.rAmount.div(RAMOUNT_DIVIDER);\n    }\n    if (rewardInfo.rAccumulateAmount) {\n      rAccum = rewardInfo.rAccumulateAmount.div(RAMOUNT_DIVIDER);\n    }\n    data[index] = {\n      rewardLastSubmiter: data[index]['rewardLastSubmiter'],\n      rewardAmount: rAmount,\n      rewardAccumulateAmount: rAccum,\n      totalStaked: data[index]['totalStaked'],\n      stakedLowestWaterMark: data[index]['stakedLowestWaterMark'],\n      totalStakedInSlot: data[index]['totalStakedInSlot'],\n      stakedAddresses: data[index]['stakedAddresses'],\n      timeKey: arr[index]\n    };\n  }\n\n  return data;\n}\n","import { BigNumber, FixedNumber } from 'ethers';\nimport { JSBI, Percent } from '@pancakeswap-libs/sdk';\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value\n    .mul(BigNumber.from(10000).add(BigNumber.from(1000)))\n    .div(BigNumber.from(10000));\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(Math.floor(num)), JSBI.BigInt(10000));\n}\n\nexport const isEmptyValue = (text: string) =>\n  BigNumber.isBigNumber(text)\n    ? BigNumber.from(text).isZero()\n    : text === '' || text.replace(/0/g, '').replace(/\\./, '') === '';\n\nexport const formatTimeKey2 = (value: number) => {\n  const date = new Date(value * 1000);\n  return date.toLocaleDateString('zh-cn');\n};\n\nexport function getTimeKey(time, baseTime, stakePeriod) {\n  baseTime = baseTime.toNumber();\n  stakePeriod = stakePeriod.toNumber();\n  if (time < baseTime) {\n    throw new Error('time < farm started time');\n  }\n  let passed = Math.round(time - baseTime);\n  let round = Math.round(passed / stakePeriod);\n  let end = baseTime + round * stakePeriod;\n  if (end < time) {\n    return end + stakePeriod;\n  }\n  return end;\n}\n\nexport const calculateDailyReward = (\n  hashrate: FixedNumber,\n  dailyBtcPerHash: FixedNumber,\n  btcPrice: FixedNumber\n) => {\n  const dailyEstimated = hashrate.mulUnsafe(dailyBtcPerHash);\n  const powerPrice = FixedNumber.from(5846)\n    .divUnsafe(FixedNumber.from(1000 * 1000 * 100))\n    .mulUnsafe(FixedNumber.from(103))\n    .divUnsafe(FixedNumber.from(100));\n  const powerPerHashUnitDay = FixedNumber.from(60).mulUnsafe(\n    FixedNumber.from(24)\n  );\n  let dailyBTCNetreward = dailyEstimated.subUnsafe(\n    powerPerHashUnitDay\n      .mulUnsafe(powerPrice)\n      .mulUnsafe(hashrate)\n      .divUnsafe(btcPrice)\n  );\n  let dailyEstimatedUSD = dailyBTCNetreward.mulUnsafe(btcPrice).round(6);\n  dailyBTCNetreward = dailyBTCNetreward.round(6);\n  return { btc: dailyBTCNetreward, usd: dailyEstimatedUSD };\n};\nconst WEEEK_REWARD_MAP =[\n  82.823529216,\n  41.411764608,\n  20.705882304,\n  10.352941152,\n  5.176470576,\n  2.588235288,\n  1.294117644,\n  0.647058822,0];\nconst START_TIME = new Date('2021-04-02 20:00 GMT+0800');\n\nexport function getDailyRewardsByBlock(pair: string) {\n  console.log(`get ${pair} rewards`);\n  let now = Date.now();\n  if (now<START_TIME.getTime()){\n    now = START_TIME.getTime()+1000;\n  }\n  let index = Math.floor((now-START_TIME.getTime())/(7*86400*1000));\n  if (index>=8){\n    index =8;\n  }\n  return FixedNumber.from(WEEEK_REWARD_MAP[index]+\"\");\n}\n","import { TokenPriceList } from 'src/service';\n\nexport function getPriceBySymbol(list: TokenPriceList, symbol: string) {\n  const item = Object.values(list).find(p => p.symbol.toLowerCase() === symbol);\n\n  if (!item) {\n    return undefined;\n  }\n\n  return item.price;\n}\n","import { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { Web3Provider, JsonRpcSigner } from '@ethersproject/providers';\nimport { Contract } from '@ethersproject/contracts';\n\nimport IBEP20 from 'src/constants/abis/IBEP20.json';\nimport FARMBTCST from 'src/constants/abis/FarmBTCST.json';\nimport TBTCChef from 'src/constants/abis/tBTCChef.json';\nimport TBTCESTPolicy from 'src/constants/abis/tBTCESTPolicy.json';\nimport MasterCollector from 'src/constants/abis/MasterCollector.json';\n\nexport function getSigner(\n  library: Web3Provider,\n  account: string\n): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked();\n}\n\nexport function getProviderOrSigner(\n  library: Web3Provider,\n  account?: string\n): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library;\n}\n\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\n\nexport function getContract(\n  address: string,\n  ABI: any,\n  library: Web3Provider,\n  account?: string\n): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\n\nexport function getERC20Contract(\n  address: string,\n  library: Web3Provider,\n  account?: string\n) {\n  return getContract(address, IBEP20.abi, library, account);\n}\n\nexport function getFarmBTCSTContract(\n  address: string,\n  library: Web3Provider,\n  account?: string\n) {\n  return getContract(address, FARMBTCST.abi, library, account);\n}\n\nexport function getTBTCChefContract(\n  address: string,\n  library: Web3Provider,\n  account?: string\n) {\n  return getContract(address, TBTCChef.abi, library, account);\n}\n\nexport function getTBTCESTPolicyContract(\n  address: string,\n  library: Web3Provider,\n  account?: string\n) {\n  return getContract(address, TBTCESTPolicy.abi, library, account);\n}\n\nexport function getMCContract(\n  address: string,\n  library: Web3Provider,\n  account?: string\n) {\n  return getContract(address, MasterCollector.abi, library, account);\n}\n\n","import { Web3Provider } from '@ethersproject/providers'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\n// eslint-disable-next-line import/no-unresolved\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\nimport { NetworkContextName  } from 'src/constants/index';\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<\n  Web3Provider\n> & { chainId?: number } {\n  const context = useWeb3ReactCore<Web3Provider>();\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\n","declare const window: any;\n\nconst track = (...args: any[]): void => {\n  if (process.env.NODE_ENV !== 'production') {\n    return;\n  }\n\n  if (!window.gtag) {\n    return;\n  }\n\n  window.gtag(...args);\n};\n\nconst pageview = (props: any): void => {\n  track('config', process.env.REACT_APP_GA_MEASUREMENT_ID, props);\n};\n\nconst event = (type: string, props: Record<string, any>) => {\n  track('event', type, props);\n};\n\nexport default {\n  pageview,\n  event\n};\n","import React, { useCallback, useRef } from 'react';\nimport type { FC } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Button,\n  SvgIcon,\n  Typography,\n  makeStyles,\n  Box,\n  Toolbar,\n  Hidden,\n  IconButton,\n  Container,\n  ButtonGroup,\n  Menu,\n  MenuItem\n} from '@material-ui/core';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport { Menu as MenuIcon } from 'react-feather';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSetRecoilState } from 'recoil';\nimport { mobileNavOpenAtom, walletModalStatusAtom, accountModalStatusAtom } from 'src/atoms';\nimport i18n from 'src/i18n';\n\ninterface FooterProps {\n  className?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  footer: {\n    position: 'fixed',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: '0px 5px 10px 0px rgb(255 255 255 / 70%)',\n    paddingTop: 16,\n    paddingBottom: 16\n  }\n}));\n\nconst Footer: FC<FooterProps> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const { account } = useWeb3React();\n  const actionRef = useRef<any>(null);\n  const setWalletModalStatus = useSetRecoilState(walletModalStatusAtom);\n  const setAccountModalStatus = useSetRecoilState(accountModalStatusAtom);\n\n  const connectWallet = useCallback(() => {\n    setWalletModalStatus(true);\n  }, [setWalletModalStatus]);\n\n  const openAccountModal = useCallback(() => {\n    setAccountModalStatus(true);\n  }, [setAccountModalStatus]);\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <Hidden lgUp>\n      <Container maxWidth={false}>\n        <Box\n          display=\"flex\"\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          flexGrow={1}\n          className={classes.footer}\n        >\n          <Box ml={2}>\n            {\n              account\n                ? <Button variant=\"contained\" onClick={openAccountModal}>{`${account.slice(0, 4)}...${account.slice(-4)}`}</Button>\n                : <Button variant=\"contained\" color=\"primary\" ref={actionRef} onClick={connectWallet}>Connect Wallet</Button>\n            }\n          </Box>\n          <Box p={0}>\n            <Button onClick={(event) => setAnchorEl(event.currentTarget)}>\n              <LanguageIcon />\n            </Button>\n            <Menu\n              anchorEl={anchorEl}\n              keepMounted\n              open={Boolean(anchorEl)}\n              onClose={() => setAnchorEl(null)}\n            >\n              <MenuItem\n                onClick={() => {\n                  i18n.changeLanguage('zh');\n                  setAnchorEl(null);\n                }}\n                selected={i18n.language === 'zh'}\n              >中文</MenuItem>\n              <MenuItem\n                onClick={() => {\n                  i18n.changeLanguage('en');\n                  setAnchorEl(null);\n                }}\n                selected={i18n.language === 'en'}\n              >EN</MenuItem>\n            </Menu>\n          </Box>\n        </Box>\n      </Container>\n    </Hidden>\n  );\n};\n\nFooter.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Footer;\n","import React, {\n  forwardRef,\n  useEffect,\n  useCallback\n} from 'react';\nimport type {\n  HTMLProps,\n  ReactNode\n} from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport track from 'src/utils/analytics';\nimport Footer from './Footer';\nimport { useFetchTokenPrice } from 'src/hooks/useFetchTokenPrice';\n\ninterface PageProps extends HTMLProps<HTMLDivElement> {\n  children?: ReactNode;\n  title?: string;\n}\n\nconst Page = forwardRef<HTMLDivElement, PageProps>(({\n  children,\n  title = '',\n  ...rest\n}, ref) => {\n  const location = useLocation();\n  useFetchTokenPrice();\n\n  const sendPageViewEvent = useCallback(() => {\n    track.pageview({\n      page_path: location.pathname\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    sendPageViewEvent();\n  }, [sendPageViewEvent]);\n\n  return (\n    <div\n      ref={ref as any}\n      {...rest}\n    >\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      {children}\n      <Footer />\n    </div>\n  );\n});\n\nPage.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string\n};\n\nexport default Page;\n","import { useEffect } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { tokenPriceListAtom, tokenPriceLoadingAtom } from 'src/atoms';\nimport { getTokenPrice, TokenPriceList } from 'src/service';\n\nexport function useFetchTokenPrice() {\n  const setTokenPriceList = useSetRecoilState(tokenPriceListAtom);\n  const setTokenPriceLoading = useSetRecoilState(tokenPriceLoadingAtom);\n\n  useEffect(() => {\n    setTokenPriceLoading(true);\n    getTokenPrice().then(list => {\n      setTokenPriceList(list);\n    }).finally(() => {\n      setTokenPriceLoading(false);\n    });\n  }, []);\n}\n","import React, {\n  useCallback,\n  useRef,\n} from 'react';\nimport type { FC } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport {\n  Button,\n  SvgIcon,\n  Typography,\n  makeStyles,\n  Box,\n  Toolbar,\n  Hidden,\n  IconButton\n} from '@material-ui/core';\n// import { Send as SendIcon } from 'react-feather';\nimport { Menu as MenuIcon } from 'react-feather';\nimport { useWeb3React } from '@web3-react/core';\nimport { useSetRecoilState } from 'recoil';\nimport { mobileNavOpenAtom, walletModalStatusAtom, accountModalStatusAtom } from 'src/atoms';\n// import { useActiveWeb3React} from 'src/hooks/useActiveWeb3React';\nimport Logo from 'src/components/Logo';\n\ninterface HeaderProps {\n  className?: string;\n  title: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // zIndex: theme.zIndex.drawer + 100,\n    // backgroundColor: theme.palette.background.default\n    padding: 0\n  },\n  account: {\n    width: 80,\n  },\n  toolbar: {\n    minHeight: 64\n  }\n}));\n\nconst Header: FC<HeaderProps> = ({ className, title, ...rest }) => {\n  const classes = useStyles();\n  const { account } = useWeb3React();\n  const actionRef = useRef<any>(null);\n  const setWalletModalStatus = useSetRecoilState(walletModalStatusAtom);\n  const setAccountModalStatus = useSetRecoilState(accountModalStatusAtom);\n  const setMobileNavOpen = useSetRecoilState(mobileNavOpenAtom);\n\n  const showNav = useCallback(() => {\n    setMobileNavOpen(true);\n  }, [setMobileNavOpen])\n\n  const connectWallet = useCallback(() => {\n    setWalletModalStatus(true);\n  }, [setWalletModalStatus]);\n\n  const openAccountModal = useCallback(() => {\n    setAccountModalStatus(true);\n  }, [setAccountModalStatus]);\n\n  return (\n    <Toolbar className={clsx(classes.root, className)} {...rest}>\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        flexGrow={1}\n        pt={3}\n        pb={3}\n      >\n        <Hidden lgUp>\n          <Logo />\n          <IconButton\n            color=\"inherit\"\n            onClick={showNav}\n          >\n            <SvgIcon fontSize=\"small\" color=\"primary\">\n              <MenuIcon />\n            </SvgIcon>\n          </IconButton>\n        </Hidden>\n        <Hidden mdDown>\n          <Box flexGrow={1}>\n            <Typography variant=\"h3\" color=\"textPrimary\">\n              {\n                /* <SvgIcon fontSize=\"small\">\n                  <SendIcon />\n                </SvgIcon> */\n              }\n              {title}\n            </Typography>\n          </Box>\n          {/* <Box ml={2} flexGrow={1} /> */}\n          <Box>\n            {\n              account\n                ? <Button variant=\"contained\" onClick={openAccountModal}>{`${account.slice(0, 4)}...${account.slice(-4)}`}</Button> \n                : <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    ref={actionRef}\n                    onClick={connectWallet}\n                  >\n                    Connect Wallet\n                  </Button>\n            }\n          </Box>\n        </Hidden>\n      </Box>\n    </Toolbar >\n  );\n};\n\nHeader.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Header;\n","import React, { FC } from 'react';\nimport clsx from 'clsx';\nimport { capitalize } from '@material-ui/core/utils';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { makeStyles, ButtonProps } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  /* Styles applied to the root element. */\n  root: {},\n  /* Styles applied to the root element if `pending={true}`. */\n  pending: {},\n  /* Styles applied to the pendingIndicator element. */\n  pendingIndicator: {\n    position: 'absolute',\n    visibility: 'visible',\n    display: 'flex'\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"center\"`. */\n  pendingIndicatorCenter: {\n    left: '50%',\n    transform: 'translate(-50%)'\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"start\"`. */\n  pendingIndicatorStart: {\n    left: 14\n  },\n  /* Styles applied to the pendingIndicator element if `pendingPosition=\"end\"`. */\n  pendingIndicatorEnd: {\n    right: 14\n  },\n  /* Styles applied to the endIcon element if `pending={true}` and `pendingPosition=\"end\"`. */\n  endIconPendingEnd: {\n    visibility: 'hidden'\n  },\n  /* Styles applied to the startIcon element if `pending={true}` and `pendingPosition=\"start\"`. */\n  startIconPendingStart: {\n    visibility: 'hidden'\n  },\n  /* Styles applied to the label element if `pending={true}` and `pendingPosition=\"center\"`. */\n  labelPendingCenter: {\n    visibility: 'hidden'\n  }\n}))\n\nconst PendingIndicator = <CircularProgress color=\"inherit\" size={16} />;\n\n\nexport interface LoadingButtonProps extends ButtonProps {\n  pending?: boolean;\n  pendingIndicator?: React.ReactNode;\n  pendingPosition?: 'start' | 'end' | 'center'\n}\n\nconst LoadingButton: FC<LoadingButtonProps> = (props) => {\n  const {\n    children,\n    className,\n    disabled = false,\n    pending = false,\n    pendingIndicator = PendingIndicator,\n    pendingPosition = 'center',\n    ...other\n  } = props;\n\n  const classes = useStyles();\n\n  return (\n    <Button\n      className={clsx(\n        classes.root,\n        {\n          [classes.pending]: pending\n        },\n        className\n      )}\n      disabled={disabled || pending}\n      classes={{\n        startIcon:\n          classes[\n            `startIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`\n          ],\n        endIcon:\n          classes[\n            `endIcon${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`\n          ],\n        label:\n          classes[\n            `label${pending ? 'Pending' : ''}${capitalize(pendingPosition)}`\n          ]\n      }}\n      {...other}\n    >\n      {pending && (\n        <div\n          className={clsx(\n            classes.pendingIndicator,\n            classes[`pendingIndicator${capitalize(pendingPosition)}`]\n          )}\n        >\n          {pendingIndicator}\n        </div>\n      )}\n\n      {children}\n    </Button>\n  );\n};\n\nexport default LoadingButton;\n","import { utils, BigNumber, FixedNumber } from 'ethers';\nimport { Token } from 'src/types/token';\nimport { useAsync } from 'react-async-hook';\nimport useAsyncEffect from 'use-async-effect';\nimport { getTokenPrice, getMineStatus, getPoolInfo } from 'src/service';\nimport { useActiveWeb3React } from './useActiveWeb3React';\nimport { getERC20Contract, getTBTCChefContract } from 'src/utils/contract';\nimport { useEffect, useMemo, useState } from 'react';\nimport { FarmingInfoMap, BTCB, TBTC, FarmingPidMap } from 'src/constants/token';\nimport { calculateDailyReward, getDailyRewardsByBlock } from 'src/utils';\nimport { formatApy } from 'src/utils/format';\nimport { getPriceBySymbol } from 'src/utils/price';\nimport { useRecoilValue } from 'recoil';\nimport { tokenPriceListAtom, tokenPriceLoadingAtom } from 'src/atoms';\nimport isEmpty from 'lodash/isEmpty';\nimport { contractConfig } from 'src/config';\n\nconst DISTRIBUTE_LINE = '0.6';\n\nexport function useDailyPool(\n  sourceToken: Token,\n  targetToken: Token,\n  txHappend: number = 0\n) {\n  const { account, library } = useActiveWeb3React();\n  const tokenPrice = useRecoilValue(tokenPriceListAtom);\n  const tokenPriceLoading = useRecoilValue(tokenPriceLoadingAtom);\n  const [loading, setLoading] = useState(true);\n  const [sourceStakeAmount, setSourceStakeAmount] = useState<BigNumber>();\n  const [tokenRewardPerStake, setTokenRewardPerStake] = useState<FixedNumber>();\n  const [usdRewardPerStake, setUsdTokenRewardPerStake] = useState<\n    FixedNumber\n  >();\n\n  const farmingInfo = useMemo(() => {\n    return FarmingInfoMap[targetToken.symbol];\n  }, [targetToken.symbol]);\n\n  const sourceTokenERC20Contract = useMemo(() => {\n    return sourceToken && sourceToken.address\n      ? getERC20Contract(sourceToken.address, library, account)\n      : null;\n  }, [sourceToken, library, account]);\n\n  useAsyncEffect(async () => {\n    setLoading(true);\n    if (tokenPriceLoading) {\n      return;\n    }\n\n    try {\n      if (targetToken.symbol === TBTC.symbol) {\n        const contract = getTBTCChefContract(\n          contractConfig.TBTC_CHEF,\n          library,\n          account\n        );\n        const poolInfo = await getPoolInfo(\n          contract,\n          FarmingPidMap[sourceToken.symbol]\n        );\n        let sourceStakeAmount = poolInfo.totalDepositAmount;\n        if (sourceStakeAmount.isZero()) {\n          return;\n        }\n        const stakedTokenShrinkFactor = poolInfo.stakedTokenShrinkFactor;\n        if (stakedTokenShrinkFactor > 0) {\n          sourceStakeAmount = sourceStakeAmount\n            .mul(stakedTokenShrinkFactor)\n            .div(BigNumber.from(1e12 + ''));\n        }\n\n        setSourceStakeAmount(sourceStakeAmount);\n\n        const hashrate = FixedNumber.from(\n          utils.formatUnits(sourceStakeAmount, sourceToken.decimals) + ''\n        );\n        const tokenReward = getDailyRewardsByBlock(\n          `${sourceToken.symbol}-${targetToken.symbol}`\n        );\n\n        const price = FixedNumber.from(\n          '' + getPriceBySymbol(tokenPrice, targetToken.symbol)\n        );\n\n        const tps = tokenReward.divUnsafe(hashrate);\n        const ups = tps.mulUnsafe(price);\n\n        setTokenRewardPerStake(tps);\n        setUsdTokenRewardPerStake(ups);\n      } else {\n        const BTCBStakeAmount: BigNumber = await sourceTokenERC20Contract.balanceOf(\n          contractConfig.FARM\n        );\n        const BTCSTStakeAmount: BigNumber = await sourceTokenERC20Contract.balanceOf(\n          contractConfig.FARM_BTCST\n        );\n\n        setSourceStakeAmount(\n          targetToken.symbol === 'btcb' ? BTCBStakeAmount : BTCSTStakeAmount\n        );\n\n        const totalAmount = BTCBStakeAmount.add(BTCSTStakeAmount);\n        let hashrate = FixedNumber.from(\n          utils.formatUnits(totalAmount, sourceToken.decimals) + ''\n        );\n        const sourceSupplyAmount: BigNumber = await sourceTokenERC20Contract.totalSupply();\n        if (\n          FixedNumber.from(totalAmount)\n            .divUnsafe(FixedNumber.from(sourceSupplyAmount))\n            .subUnsafe(FixedNumber.from(DISTRIBUTE_LINE))\n            .isNegative()\n        ) {\n          hashrate = FixedNumber.from(DISTRIBUTE_LINE).mulUnsafe(\n            FixedNumber.fromString(\n              utils.formatUnits(sourceSupplyAmount, sourceToken.decimals) + ''\n            )\n          );\n        }\n\n        const mineBTCBStatus = await getMineStatus();\n        const dailyBtcPerHash = FixedNumber.from(\n          mineBTCBStatus.dayList[0].eachHaveCoin\n        );\n        const price = FixedNumber.from(\n          '' + getPriceBySymbol(tokenPrice, BTCB.symbol)\n        );\n        console.log(\n          'calculate netreward using pric:' +\n            price +\n            ' daily btc per TH:' +\n            dailyBtcPerHash +\n            ' hashrate:' +\n            hashrate\n        );\n\n        const { btc, usd } = calculateDailyReward(\n          hashrate,\n          dailyBtcPerHash,\n          price\n        );\n        const tps = btc.divUnsafe(hashrate);\n        const ups = usd.divUnsafe(hashrate);\n        setTokenRewardPerStake(tps);\n        setUsdTokenRewardPerStake(ups);\n      }\n    } catch (e) {\n      console.error(e);\n      console.log('get apy error');\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    sourceToken,\n    targetToken,\n    sourceTokenERC20Contract,\n    tokenPrice,\n    library,\n    account,\n    txHappend\n  ]);\n\n  const apy = useMemo(() => {\n    if (!loading && usdRewardPerStake) {\n      return formatApy(\n        usdRewardPerStake.divUnsafe(FixedNumber.fromString('10')),\n        FixedNumber.fromString(\n          '' + getPriceBySymbol(tokenPrice, sourceToken.symbol)\n        )\n      );\n    }\n  }, [usdRewardPerStake, tokenPrice, loading, txHappend]);\n\n  return {\n    loading,\n    farmingInfo,\n    sourceStakeAmount,\n    usdRewardPerStake,\n    tokenRewardPerStake,\n    apy\n  };\n}\n","import React, { FC, useEffect, useMemo, useState } from 'react';\nimport {\n  Typography,\n  makeStyles,\n  Grid,\n  Box,\n  TextField,\n  CircularProgress,\n  Button,\n  Divider\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport LoadingButton from 'src/components/LoadingButton';\nimport { BigNumber, FixedNumber } from '@ethersproject/bignumber';\nimport { utils } from 'ethers';\nimport { Theme } from 'src/theme';\nimport { formatBalance, parseBalance, formatApy } from 'src/utils/format';\nimport { isEmptyValue, calculateDailyReward } from 'src/utils';\nimport currency from 'currency.js';\nimport { useTranslation } from 'react-i18next';\nimport { BTCB } from 'src/constants/token';\nimport { getPriceBySymbol } from 'src/utils/price';\nimport { tokenPriceLoadingAtom } from 'src/atoms';\nimport { useRecoilValue } from 'recoil';\n\nconst DISTRIBUTE_LINE = '0.6';\n\ninterface StakeContentProps {\n  state: any;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  inputArea: {\n    marginBottom: '15px'\n  }\n}));\n\nconst percentMap = [\n  {\n    title: '25%',\n    value: 0.25,\n    cal: [1, 4]\n  },\n  {\n    title: '50%',\n    value: 0.5,\n    cal: [1, 2]\n  },\n  {\n    title: '75%',\n    value: 0.75,\n    cal: [3, 4]\n  },\n  {\n    title: '100%',\n    value: 1,\n    cal: [1, 1]\n  }\n];\n\nconst StakeContent: FC<StakeContentProps> = ({ state }) => {\n  const classes = useStyles();\n\n  const { t } = useTranslation();\n  const {\n    stokenAllowed,\n    asyncApproveClick,\n    asyncStakeClick,\n    sourceToken,\n    targetToken,\n    sourceBalance,\n    yourStakeAmount,\n    sourceStakeAmount,\n    tokenPrice,\n    apy,\n    usdRewardPerStake,\n    tokenRewardPerStake,\n    poolLoading\n  } = state;\n\n  const tokenPriceLoading = useRecoilValue(tokenPriceLoadingAtom);\n\n  const formik = useFormik({\n    initialValues: {\n      amount: '0'\n    },\n    onSubmit: () => {}\n  });\n\n  const {\n    handleChange,\n    handleSubmit,\n    isSubmitting,\n    touched,\n    values,\n    errors,\n    setFieldValue\n  } = formik;\n\n  const [estRewardTokenAmount, setEstRewardTokenAmount] = useState<\n    FixedNumber\n  >();\n  const [estRewardUsd, setEstRewardUsd] = useState<FixedNumber>();\n\n  useEffect(() => {\n    if (tokenRewardPerStake && usdRewardPerStake && values.amount) {\n      const amount = FixedNumber.from(\n        utils.formatUnits(\n          parseBalance(values.amount + '', sourceToken.decimals),\n          sourceToken.decimals\n        )\n      );\n\n      const ru = usdRewardPerStake.mulUnsafe(amount);\n\n      setEstRewardUsd(ru);\n\n      if (targetToken && tokenPrice) {\n        const price = getPriceBySymbol(tokenPrice, targetToken.symbol);\n        // console.log(\"----tokenRewardPerStake,usdRewardPerStake\",\n        //   tokenRewardPerStake+\"\",usdRewardPerStake+\"\",amount+\"\",price);\n        setEstRewardTokenAmount(\n          ru.divUnsafe(FixedNumber.from(price + ''))\n        );\n      }\n    }\n  }, [tokenRewardPerStake, usdRewardPerStake, values.amount, targetToken, tokenPrice, sourceToken]);\n\n  return sourceBalance.loading ? (\n    <CircularProgress />\n  ) : (\n    <form className={classes.root} onSubmit={handleSubmit}>\n      <Typography variant=\"h6\">\n        {t('mine.staking.readyToBeStaked')}:{' '}\n        {sourceBalance.result &&\n          formatBalance(sourceBalance.result, sourceToken.decimals)}\n      </Typography>\n      <Box mt={2} className={classes.inputArea}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              type=\"number\"\n              name=\"amount\"\n              label={t('mine.staking.stakedAmountInput')}\n              error={Boolean(touched.amount && errors.amount)}\n              helperText={touched.amount && errors.amount}\n              fullWidth\n              required\n              value={values.amount}\n              onChange={handleChange}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item container xs={12} sm={6}>\n            {percentMap.map(item => (\n              <Grid key={item.value} item xs={3}>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    const m = item.cal[0];\n                    const d = item.cal[1];\n                    setFieldValue(\n                      'amount',\n                      utils.formatUnits(\n                        sourceBalance.result\n                          .mul(BigNumber.from(m))\n                          .div(BigNumber.from(d)),\n                        sourceToken.decimals\n                      )\n                    );\n                  }}\n                >\n                  {item.title}\n                </Button>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Box>\n      <Typography variant=\"body2\">\n        {t('mine.staking.estyDailyReward')} ({targetToken.name}) :{' '}\n        {estRewardTokenAmount && !estRewardTokenAmount.isNegative()\n          ? formatBalance(estRewardTokenAmount as any, 19, 8)\n          : ''}\n      </Typography>\n      <Typography variant=\"body2\">\n        {t('mine.staking.estyDailyReward')} (USD) : \n        {estRewardUsd && !estRewardUsd.isNegative()\n          ? '$' + formatBalance(estRewardUsd as any, 19, 4)\n          : ''}\n      </Typography>\n      <Typography variant=\"body2\">\n        {t('mine.staking.apy')} : {apy ? apy + '%' : '-'}\n      </Typography>\n      <Box mt={2}>\n        {(sourceBalance.result && sourceBalance.result.isZero()) ||\n        isEmptyValue(values.amount + '') ? (\n          <Button\n            fullWidth\n            color=\"secondary\"\n            disabled={true}\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n          >\n            {t('mine.staking.stake')}\n          </Button>\n        ) : parseBalance(\n            //FixedNumber.fromString(values.amount + '').round() + '',\n            values.amount + '',\n            sourceToken.decimals\n          ).gt(sourceBalance.result) ? (\n          <Button\n            fullWidth\n            color=\"secondary\"\n            disabled={true}\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n          >\n            {t('mine.staking.insufficientBalance')}\n          </Button>\n        ) : stokenAllowed ? (\n          <LoadingButton\n            fullWidth\n            color=\"secondary\"\n            // disabled={isSubmitting}\n            pending={asyncStakeClick.loading}\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            onClick={async () => {\n              await asyncStakeClick.execute(\n                parseBalance(values.amount+\"\", sourceToken.decimals)\n              );\n              setFieldValue('amount', '0');\n            }}\n          >\n            {t('mine.staking.stake')}\n          </LoadingButton>\n        ) : (\n          <LoadingButton\n            fullWidth\n            color=\"secondary\"\n            // disabled={isSubmitting}\n            pending={asyncApproveClick.loading}\n            size=\"large\"\n            type=\"submit\"\n            variant=\"contained\"\n            onClick={() => asyncApproveClick.execute()}\n          >\n            {t('mine.staking.approve')}\n          </LoadingButton>\n        )}\n      </Box>\n      <Box mt={2}>\n        <Grid container spacing={2}>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">\n              {t('mine.staking.youStaked')} :{' '}\n              {yourStakeAmount.loading || tokenPriceLoading\n                ? 'loading'\n                : formatBalance(yourStakeAmount.result, sourceToken.decimals)}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">\n              {t('mine.staking.totalStaked')}:{' '}\n              {sourceStakeAmount\n                ? formatBalance(sourceStakeAmount, sourceToken.decimals)\n                : '-'}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">\n              {t('mine.staking.youStaked')} (USD):{' '}\n              {yourStakeAmount.loading || tokenPriceLoading\n                ? 'loading'\n                : currency(\n                    FixedNumber.from(\n                      '' + getPriceBySymbol(tokenPrice, sourceToken.symbol)\n                    )\n                      .mulUnsafe(\n                        FixedNumber.from(\n                          utils.formatUnits(\n                            yourStakeAmount.result,\n                            sourceToken.decimals\n                          )\n                        )\n                      )\n                      .toString()\n                  ).format()}\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Typography variant=\"body2\">\n              {t('mine.staking.totalStaked')} (USD):{' '}\n              {sourceStakeAmount && tokenPrice\n                ? currency(\n                    FixedNumber.from(\n                      '' + getPriceBySymbol(tokenPrice, sourceToken.symbol)\n                    )\n                      .mulUnsafe(\n                        FixedNumber.from(\n                          utils.formatUnits(\n                            sourceStakeAmount,\n                            sourceToken.decimals\n                          )\n                        )\n                      )\n                      .toString()\n                  ).format()\n                : '-'}\n            </Typography>\n          </Grid>\n        </Grid>\n      </Box>\n      {/* <Box mt={2}>\n        <LoadingButton\n          fullWidth\n          color=\"secondary\"\n          // disabled={isSubmitting}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          onClick={() => asyncApproveClick.execute(BigNumber.from(0))}\n        >\n          Rollback Approve\n        </LoadingButton>\n      </Box> */}\n    </form>\n  );\n};\n\nexport default StakeContent;\n","import React, { FC, useEffect, useMemo } from 'react';\nimport {\n  Typography,\n  makeStyles,\n  Grid,\n  Box,\n  TextField,\n  Button,\n  CircularProgress\n} from '@material-ui/core';\nimport { useFormik } from 'formik';\nimport { useStakeState } from 'src/hooks/useStakeState';\nimport {\n  commonFormatBalance,\n  formatBalance,\n  parseBalance\n} from 'src/utils/format';\nimport { FixedNumber, utils, BigNumber } from 'ethers';\nimport { isEmptyValue } from 'src/utils';\nimport { useTranslation } from 'react-i18next';\nimport LoadingButton from 'src/components/LoadingButton';\n\ninterface UnstakeContentProps {\n  state: any;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {}\n}));\n\nconst percentMap = [\n  {\n    title: '25%',\n    value: 0.25,\n    cal: [1, 4]\n  },\n  {\n    title: '50%',\n    value: 0.5,\n    cal: [1, 2]\n  },\n  {\n    title: '75%',\n    value: 0.75,\n    cal: [3, 4]\n  },\n  {\n    title: '100%',\n    value: 1,\n    cal: [1, 1]\n  }\n];\n\nconst UnstakeContent: FC<UnstakeContentProps> = ({ state }) => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const {\n    targetToken,\n    yourStakeAmount,\n    asyncUnstakeClick,\n    sourceToken\n  } = state;\n\n  const formik = useFormik({\n    initialValues: {\n      amount: '0.0'\n    },\n    onSubmit: () => {}\n  });\n\n  const {\n    handleChange,\n    handleSubmit,\n    isSubmitting,\n    touched,\n    values,\n    errors,\n    setFieldValue\n  } = formik;\n\n  const insufficientBalance = parseBalance(\n    values.amount + '' || '0',\n    sourceToken.decimals\n  ).gt(yourStakeAmount.result || BigNumber.from(0));\n\n  return yourStakeAmount.loading ? (\n    <CircularProgress />\n  ) : (\n    <form className={classes.root} onSubmit={handleSubmit}>\n      <Typography variant=\"h6\">\n        {t('mine.staking.youStaked')}:{' '}\n        {yourStakeAmount.loading\n          ? 'loading'\n          : formatBalance(yourStakeAmount.result, sourceToken.decimals)}\n      </Typography>\n      <Box mt={2}>\n        <Grid container spacing={2}>\n          <Grid item xs={12} sm={6}>\n            <TextField\n              type=\"number\"\n              name=\"amount\"\n              label={t('mine.staking.unstakedAmountInput')}\n              error={Boolean(touched.amount && errors.amount)}\n              helperText={touched.amount && errors.amount}\n              fullWidth\n              required\n              value={values.amount}\n              onChange={handleChange}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item container xs={12} sm={6}>\n            {percentMap.map(item => (\n              <Grid key={item.value} item xs={3}>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    const m = item.cal[0];\n                    const d = item.cal[1];\n                    setFieldValue(\n                      'amount',\n                      utils.formatUnits(\n                        yourStakeAmount.result\n                          .mul(BigNumber.from(m))\n                          .div(BigNumber.from(d)),\n                        sourceToken.decimals\n                      )\n                    );\n                  }}\n                >\n                  {item.title}\n                </Button>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Box>\n      <Box mt={2}>\n        <LoadingButton\n          fullWidth\n          color=\"secondary\"\n          disabled={isEmptyValue(values.amount + '') || insufficientBalance}\n          pending={asyncUnstakeClick.loading}\n          size=\"large\"\n          type=\"submit\"\n          variant=\"contained\"\n          onClick={() =>\n            asyncUnstakeClick.execute(\n              parseBalance(values.amount + '', sourceToken.decimals)\n            )\n          }\n        >\n          {insufficientBalance\n            ? t('mine.staking.insufficientBalance')\n            : t('mine.staking.unstake')}\n        </LoadingButton>\n      </Box>\n    </form>\n  );\n};\n\nexport default UnstakeContent;\n","import { BigNumber } from 'ethers';\nimport { useAsync, useAsyncCallback } from 'react-async-hook';\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { toastConfig } from 'src/config';\nimport { useCallback, useEffect, useState, useMemo } from 'react';\nimport { useQuery } from 'src/hooks/useQuery';\nimport { TokenList, BTCB, BTCST, TBTC,FarmingInfoMap,FarmingPidMap } from 'src/constants/token';\nimport { Token,EnTokenMining } from 'src/types/token';\nimport { getERC20Contract, getFarmBTCSTContract,getTBTCChefContract } from 'src/utils/contract';\nimport { useActiveWeb3React } from './useActiveWeb3React';\nimport { toast } from 'react-toastify';\nimport { useDailyPool } from './useDailyPool';\nimport { useRecoilValue } from 'recoil';\nimport { tokenPriceListAtom } from 'src/atoms';\nconst EXPAND_BASE = BigNumber.from(1e12);\nconst minAllowance = BigNumber.from(2)\n  .pow(96)\n  .sub(1); \nexport const useStakeState = () => {\n  const { account, library } = useActiveWeb3React();\n  const query = useQuery();\n  const tokenPrice = useRecoilValue(tokenPriceListAtom);\n  const [stokenAllowed, setStokenAllowed] = useState<boolean>(false);\n  const [txHappend,setTxHappend] = useState<number>(0);\n  const [sourceToken, targetToken] = useMemo(() => {\n    const pair = query.get('pair');\n    if (!pair) {\n      return [null, null];\n    }\n\n    return pair.split('/').map(name => {\n      if (!TokenList[name]) {\n        console.error('Invalid pair');\n        return null;\n      }\n\n      return TokenList[name] as Token;\n    });\n  }, [query.get]);\n\n  const {\n    loading,\n    farmingInfo,\n    // sourceSupplyAmount,\n    sourceStakeAmount,\n    usdRewardPerStake,\n    tokenRewardPerStake,\n    apy\n  } = useDailyPool(sourceToken, targetToken, txHappend);\n\n  const stakingPid = useMemo(()=>{\n    return sourceToken && sourceToken.symbol ? FarmingPidMap[sourceToken.symbol]:0;\n  },[sourceToken]);\n\n  const sourceTokenERC20Contract = useMemo(() => {\n    return sourceToken && sourceToken.address\n      ? getERC20Contract(sourceToken.address, library, account)\n      : null;\n  }, [sourceToken, library, account]);\n  \n  const farmContract = useMemo(() => {\n    return farmingInfo\n      ? (farmingInfo.type== EnTokenMining.DAILY ? \n          getFarmBTCSTContract(\n            farmingInfo.address,\n            library,\n            account\n        ):getTBTCChefContract(\n            farmingInfo.address,\n            library,\n            account))\n      : null;\n  }, [targetToken, library, account]);\n\n\n  const sourceBalance = useAsync<BigNumber>(() => {\n    return sourceTokenERC20Contract.balanceOf(account);\n  }, [sourceTokenERC20Contract, account, txHappend]);\n\n  // TODO: diff  block/daily \n\n\n  const allowance = useAsync<BigNumber>(() => {\n    return sourceTokenERC20Contract.allowance(\n      account,\n      farmingInfo ? farmingInfo.address : null\n    );\n  }, [\n    sourceTokenERC20Contract,\n    account,\n    farmingInfo,\n    txHappend\n  ]);\n\n  const asyncApproveClick = useAsyncCallback(\n    async (amount: BigNumber = MaxUint256) => {\n      \n      const gasLimit = await sourceTokenERC20Contract.estimateGas.approve(farmingInfo.address, amount);\n      const tx = await sourceTokenERC20Contract.approve(farmingInfo.address, amount, {\n        gasLimit\n      });\n      \n      if (tx) {\n        await tx.wait();\n        setTxHappend(txHappend + 1);\n      }\n\n      return true;\n    }\n  );\n\n  const asyncStakeClick = useAsyncCallback(async (amount: BigNumber) => {\n    console.log(\"staking\",amount+\"\");\n    let tx;\n    try {\n      if (farmingInfo.type == EnTokenMining.DAILY){\n        const gasLimit = await farmContract.estimateGas.apiDepositToMining(amount);\n        tx = await farmContract.apiDepositToMining(amount, {\n          gasLimit: gasLimit.mul(105).div(100)\n        });\n      }\n      if (farmingInfo.type == EnTokenMining.BLOCK){\n        const gasLimit = await farmContract.estimateGas.deposit(stakingPid,amount);\n        tx = await farmContract.deposit(stakingPid,amount, {\n          gasLimit: gasLimit.mul(105).div(100)\n        });\n      }\n    } catch (e) {\n      // toast.error(e?.data?.message || 'Network error', toastConfig);\n    }\n    if (tx){\n      await tx.wait();\n      setTxHappend(txHappend + 1);\n    }\n  });\n\n  const asyncUnstakeClick = useAsyncCallback(async (amount: BigNumber) => {\n    let tx;\n    if (farmingInfo.type === EnTokenMining.DAILY){\n      const gasLimit = await farmContract.estimateGas.apiWithdrawLatestSToken(\n        amount\n      );\n      tx = await farmContract.apiWithdrawLatestSToken(amount, {\n        gasLimit: gasLimit.mul(105).div(100)\n      });\n    }\n    if (farmingInfo.type === EnTokenMining.BLOCK){\n      console.log(farmContract.withdraw.estimateGas);\n      const gasLimit = await farmContract.estimateGas.withdraw(stakingPid,amount);\n      tx = await farmContract.withdraw(stakingPid,amount, {\n        gasLimit: gasLimit.mul(105).div(100)\n      });\n    }\n    if (tx){\n      await tx.wait();\n      setTxHappend(txHappend + 1);\n    }\n  })\n\n  useEffect(() => {\n    setStokenAllowed(allowance.result && allowance.result.gte(minAllowance));\n  }, [allowance.result, asyncApproveClick.result]);\n\n  const poolInfo = useAsync<any>(() => {\n    if (targetToken.symbol === TBTC.symbol) {\n      return farmContract.poolInfo(stakingPid);\n    }\n    return undefined;\n  },[farmContract, account, stakingPid, txHappend]);\n\n\n  // const farmUserInfo = useAsync<any>(viewUserInfo, [farmContract, account]);\n  const farmUserInfo = useAsync<any>(() => {\n    if (targetToken.symbol === TBTC.symbol) {\n      return farmContract.stakingInfo(stakingPid, account);\n    } else {\n      return farmContract.viewUserInfo(account);\n    }\n  }, [farmContract, account, stakingPid, txHappend]);\n\n\n  const yourStakeAmount = useMemo(() => {\n    const info = farmUserInfo.result;\n    let result = info\n      ? targetToken.symbol === TBTC.symbol\n        ? info.amount\n        : info.amount.add(info.lockedAmount)\n      : BigNumber.from(0);\n    if (poolInfo && info && targetToken.symbol === TBTC.symbol){\n      if (poolInfo.result && poolInfo.result.stakedTokenShrinkFactor.gt(0)){\n        result = result.mul(\n          poolInfo.result.stakedTokenShrinkFactor).div(EXPAND_BASE);\n      }\n    }\n    return { \n      loading: farmUserInfo.loading,\n      error: farmUserInfo.error,\n      result\n    }\n  }, [poolInfo,targetToken, farmUserInfo.result, farmUserInfo.loading, farmUserInfo.error]);\n  \n  return {\n    stokenAllowed,\n    asyncApproveClick,\n    asyncStakeClick,\n    asyncUnstakeClick,\n    sourceToken,\n    targetToken,\n    account,\n    sourceBalance,\n    yourStakeAmount,\n    sourceStakeAmount,\n    // sourceSupplyAmount,\n    tokenPrice,\n    usdRewardPerStake,\n    tokenRewardPerStake,\n    apy,\n    poolLoading: loading\n  };\n};\n","import { useLocation } from \"react-router-dom\";\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import React, { FC, useCallback, useState, useEffect } from 'react';\nimport {\n  Container,\n  makeStyles,\n  Box,\n  Divider,\n  Card,\n  CardContent,\n  CardHeader,\n  Avatar,\n  Select,\n  MenuItem,\n  Grid,\n  Breadcrumbs,\n  Link\n} from '@material-ui/core';\n\nimport Page from 'src/components/Page';\nimport Header from 'src/components/Header';\nimport { Theme } from 'src/theme';\nimport StakeContent from './StakeContent';\nimport UnstakeContent from './UnstakeContent';\nimport { useStakeState } from 'src/hooks/useStakeState';\nimport { useTranslation } from 'react-i18next';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%'\n    // paddingTop: theme.spacing(3),\n    // paddingBottom: theme.spacing(3)\n  },\n\n  icon: {\n    marginRight: 5\n  },\n\n  text: {\n    marginRight: 15\n  }\n}));\n\ntype StakeTye = 'stake' | 'unstake';\n\nconst StakeView: FC = () => {\n  const classes = useStyles();\n  const state = useStakeState();\n  const { sourceToken, targetToken, account } = state;\n  const { t } = useTranslation();\n\n  const [type, setType] = useState<StakeTye>('stake');\n\n  const handleTypeChange = useCallback(e => {\n    setType(e.target.value);\n  }, []);\n\n  return (\n    <Page className={classes.root} title=\"Stake\">\n      <Container maxWidth={false}>\n        <Header title={t('mine.title.second')} />\n        <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link color=\"inherit\" href=\"/#/mine\" onClick={()=>{}}>\n          {t('menu.mine')}\n        </Link>\n        <Link color=\"textPrimary\"\n          aria-current=\"page\"\n        >\n          {t(\"mine.page.\"+type)}\n        </Link>\n      </Breadcrumbs>\n        <Box mt={3}></Box>\n        <Divider />\n        <Card>\n          <CardHeader\n            title={\n              <Box display=\"flex\" alignItems=\"center\">\n                <Box flexGrow={1}>\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <span className={classes.text}>\n                      {t('mine.staking.stake')}:\n                    </span>{' '}\n                    <Avatar\n                      className={classes.icon}\n                      src={sourceToken.logoURI}\n                    />{' '}\n                    <span className={classes.text}>{sourceToken.name}</span>\n                    <span className={classes.text}>\n                      {t('mine.staking.mines')}:\n                    </span>{' '}\n                    <Avatar\n                      className={classes.icon}\n                      src={targetToken.logoURI}\n                    />{' '}\n                    <span className={classes.text}>{targetToken.name}</span>\n                  </Box>\n                </Box>\n                <Box>\n                  <Select value={type} onChange={handleTypeChange}>\n                    <MenuItem key=\"stake\" value=\"stake\">\n                      {t('mine.staking.stake')}\n                    </MenuItem>\n                    <MenuItem key=\"unstake\" value=\"unstake\">\n                      {t('mine.staking.unstake')}\n                    </MenuItem>\n                  </Select>\n                </Box>\n              </Box>\n            }\n          ></CardHeader>\n          <CardContent>\n            {!account && t('global.loginFirst')}\n            {account && type === 'stake' && <StakeContent state={state} />}\n            {account && type === 'unstake' && <UnstakeContent state={state} />}\n          </CardContent>\n        </Card>\n      </Container>\n    </Page>\n  );\n};\n\nexport default StakeView;\n"],"sourceRoot":""}